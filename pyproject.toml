# For creating the package, I followed these tutorials:
# 	https://packaging.python.org/en/latest/tutorials/packaging-projects/
# 	https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

[project]
name = "dope"
description = "Collection of tests and a CLI tool for my Obsidian vaults. Task tracker."
readme = "README.md"
dynamic = [
	"version",
]
authors = [
	{name="ppbrs", email="prishchepenko.boris@gmail.com"},
]
requires-python = ">=3.10"
dependencies = [
	"psutil >= 5.9",
	"types-psutil >= 5.9",
	"colorama >= 0.4",
	"types-colorama >= 0.4",
	"pylama >= 8.4.1",

	"PyGObject >= 3.50",  # requires libgirepository1.0-dev for some reason
]

# For a complete list of classifiers, see https://pypi.org/classifiers/.
classifiers = [
	"Programming Language :: Python :: 3",
	"License :: OSI Approved :: MIT License",
	"Operating System :: OS Independent",
]

# After installing the project, a `d` command will be available.
# Executing it will do the equivalent of `from dope import dope_cli; dope_cli()`.
[project.scripts]
d = "dope:dope_cli"

# [build-system] declares which build backend to use - a library that takes a source tree
# and builds a source distribution (*.tar.gz) or wheel (*.whl) from it.
# Examples:
# 	hatchling (https://packaging.python.org/en/latest/key_projects/#setuptools)
# 		https://pypi.org/project/hatchling/
# 	setuptools (https://packaging.python.org/en/latest/key_projects/#setuptools)
# 		https://pypi.org/project/setuptools/
# Also [build-system] allows declaring which dependencies are needed to build the project,
# see `requires`.
[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "dope/__about__.py"

[project.urls]
"Homepage" = "https://github.com/ppbrs/dope"
"Bug Tracker" = "https://github.com/ppbrs/dope/issues"

#
# pytest configuration
#
[tool.pytest.ini_options]
# Having pytest look for all files instead of "test_*.py" only:
python_files = "*.py"

# Logging level for failed tests:
log_level = "DEBUG"
log_date_format = "%H:%M:%S"
log_format = "%(asctime)s.%(msecs)03d %(levelname)s %(funcName)s: %(message)s"

# Logging level for real-time output:
log_cli = "True"
log_cli_level = "INFO"
